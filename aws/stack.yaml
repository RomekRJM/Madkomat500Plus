AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates AWS stack for Madkomat500Plus'

Parameters:
  SNSTopicName:
    Type: String

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - S3BucketPermission
    Properties:
      BucketName: !Sub "madkomat-images-${AWS::AccountId}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: "suffix"
                    Value: ".jpg"
            Function: !GetAtt RecognitionLambda.Arn

  S3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RecognitionLambda
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::madkomat-images-${AWS::AccountId}"

  SnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Ref SNSTopicName
      DisplayName: "To notify madkomat Android app."

  RecognitionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC: !Ref SnsTopic
      Code:
        ZipFile: |
          import json
          import urllib
          import os

          import boto3

          rekognition = boto3.client('rekognition')
          sns = boto3.client('sns')


          def detect_faces(bucket, key):
              return rekognition.detect_faces(Image={"S3Object": {"Bucket": bucket, "Name": key}}, Attributes=["ALL"])


          def publish(message):
              sns.publish(TopicArn=os.getenv('SNS_TOPIC'), Message=json.dumps(message))


          def lambda_handler(event, context):
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.quote_plus(event['Records'][0]['s3']['object']['key'].encode('utf8'))

              try:
                  print(str(key))
                  response = detect_faces(bucket, key)
                  print(response)
                  send_notification(response)
              except Exception as e:
                  return publish(
                      {
                          "Error": str(e)
                      }
                  )

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "recognition-s3-sns"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "rekognition:CreateCollection"
                  - "rekognition:IndexFaces"
                  - "rekognition:CompareFaces"
                  - "rekognition:DetectFaces"
                  - "rekognition:DetectLabels"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Ref SnsTopic
