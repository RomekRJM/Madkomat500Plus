AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates AWS stack for Madkomat500Plus'

Parameters:
  IdentityPoolName:
    Type: String

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - S3BucketPermission
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "madkomat-${AWS::AccountId}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: "suffix"
                    Value: ".jpg"
            Function: !GetAtt RecognitionLambda.Arn

  S3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref RecognitionLambda
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::madkomat-${AWS::AccountId}"

  RecognitionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          OUTPUT_BUCKET: !Sub "madkomat-${AWS::AccountId}"
          OUTPUT_KEY_PREFIX: recognition
      Code:
        ZipFile: |
          import json
          import urllib
          import os

          import boto3
          from botocore.exceptions import ClientError

          rekognition = boto3.client('rekognition')
          s3 = boto3.client('s3')


          def detect_faces(bucket, key):
              return rekognition.detect_faces(Image={"S3Object": {"Bucket": bucket, "Name": key}}, Attributes=["ALL"])


          def publish(output_key, message):
              s3.put_object(Bucket=os.getenv('OUTPUT_BUCKET'), Body=json.dumps(message), Key=output_key)


          def parse_event(event):
              s3_record = event['Records'][0]['s3']
              bucket = s3_record['bucket']['name']
              key = urllib.parse.quote_plus(s3_record['object']['key'].encode('utf8'))
              output_key = key.replace(".jpg", ".json")

              return bucket, key, output_key


          def lambda_handler(event, context):
              bucket, key, output_key = parse_event(event)

              try:
                  print("Detecting faces on {}".format(str(key)))

                  response = detect_faces(bucket, key)

                  print("Detection result: {}".format(response))
                  print("Publishing result to S3: {}/{}".format(bucket, output_key))

                  publish(output_key, { "Response": response, "Error": None })

              except ClientError as e:
                  print(str(e))
                  return publish(output_key, { "Response": {}, "Error": str(e) })

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "recognition-s3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::madkomat-${AWS::AccountId}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "rekognition:CreateCollection"
                  - "rekognition:IndexFaces"
                  - "rekognition:CompareFaces"
                  - "rekognition:DetectFaces"
                  - "rekognition:DetectLabels"
                Resource: "*"

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: true

  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::madkomat-${AWS::AccountId}/*"
              - Effect: "Allow"
                Action:
                  - "s3:List*"
                  - "s3:Head*"
                Resource: !Sub "arn:aws:s3:::madkomat-${AWS::AccountId}"

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
